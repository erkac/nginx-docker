server {
  status_zone default_server_http;
  listen 80 default_server;
  server_name localhost;

  return 301 https://$host:8443$request_uri;

  server_tokens off;
}

server {
  status_zone default_server_https;
  listen       443 ssl http2;
  server_name  localhost;

  server_tokens off;

  ssl_certificate /etc/nginx/ssl/certificate.crt;
  ssl_certificate_key /etc/nginx/ssl/privatekey.key;
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  ssl_protocols TLSv1.2;
  ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;
  ssl_prefer_server_ciphers on;

  add_header Strict-Transport-Security: mac-age=60;
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options: DENY;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
  }

  #error_page  404              /404.html;

  # redirect server error pages to the static page /50x.html
  #
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
      root   /usr/share/nginx/html;
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  #location ~ \.php$ {
  #    proxy_pass   http://127.0.0.1;
  #}

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht {
  #    deny  all;
  #}

  # enable /api/ location with appropriate access control in order
  # to make use of NGINX Plus API
  #
  location /api/ {
      api write=on;
      allow 127.0.0.1;
      allow 172.21.0.0/24;
      deny all;
  }

  # enable NGINX Plus Dashboard; requires /api/ location to be
  # enabled and appropriate access control for remote access
  #
  location = /dashboard.html {
      root /usr/share/nginx/html;
  }

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarder-For $proxy_add_x_forwarded_for;

  location /backend {
    ssi on;
    proxy_pass http://myBackend/;
  }
}